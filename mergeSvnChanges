#!/bin/sh

# This script helps you to merge changes from trunk to the branches or vis versa

# DONE: merge changes from branches to trunk - 2009-06-05 18:30

# Colors

BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
BROWN="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
LIGHTGRAY="\033[0;37m"

DARKGRAY="\033[1;30m"
LIGHTRED="\033[1;31m"
LIGHTGREEN="\033[1;32m"
YELLOW="\033[1;33m"
LIGHTBLUE="\033[1;34m"
LIGHTPURPLE="\033[1;35m"
LIGHTCYAN="\033[1;36m"
WHITE="\033[1;37m"

BG_BLACK="\033[40m"
BG_RED="\033[41m"
BG_GREEN="\033[42m"
BG_BROWN="\033[43m"
BG_BLUE="\033[44m"
BG_PURPLE="\033[45m"
BG_CYAN="\033[46m"
BG_LIGHTGRAY="\033[47m"

# queries user for input
# $1: allow empty input [0|1]
# $2: query
# $3: default value
queryUser ()
{
	unset result

	while [ -z "${result}" ]; do
		result=$3
		if [ -z "${3}" ]; then
			read -p "$2: " input
		else
			read -p "$2 [$3]: " input
		fi
		if [ -z "${input}" -a "${1}" == "1" ]; then
			echo $input
			return
		elif [ -n "${input}" ]; then
			result=$input
		fi
	done
	echo $result
}

# $1: exit code
# $2-*: error message
failError ()
{
	exitcode=$1
	shift 1
	log 3 $*
	exit $exitcode
}

log ()
{
	type=$1
	shift
	case $type in
		1)
		type="${GREEN}INFO:${BLACK}"
		;;
		2)
		type="${YELLOW}WARNING:${BLACK}"
		;;
		3)
		type="${RED}ERROR:${BLACK}"
		;;
		*)
		;;
	esac
	echo -e "$type ${*}" 1>&2
}

##### Start execution

[ $# -lt 1 ] && echo USAGE: $(basename $0) SVNREVISION && exit 1

svnrev=$1
root_svnpath=$(sed -ne '6p' .svn/entries)
log_msg=$(mktemp || failError 1 "Unable to create temporary file.")

merge=
if [ -n "$(pwd | sed -ne 's#^.*/\(trunk\)/.*$#\1#p')" ]; then
	branch=$(queryUser 0 "Please enter the name of the desired branch" "ucs-2.2")
	merge="merge from trunk to branch ${branch}"
	destdir=$(echo $(pwd)|sed -e "s#/trunk/#/branches/$branch/#")
elif [ -n "$(pwd | sed -ne 's#^.*/\(branches\)/.*$#\1#p')" ]; then
	sure=$(queryUser 0 "Hm, you seem to be in a branch, are you sure you want to merge to the trunk?" "n")
	if [ "$sure" = 'y' -o "$sure" = 'Y' ]; then
		merge="merge from branch $(echo $(pwd)|sed -e 's#.*/branches/\(ucs-[0-9.]*\)/.*#\1#') to trunk"
		destdir=$(echo $(pwd)|sed -e "s#/branches/ucs-[0-9.]*/#/trunk/#")
	else
		log 1 "Bye, bye."
		exit 0
	fi
else
	log 3 "Either you commit to the directory structure this script is expecting or NOT!\nYou don't seem to commit to it!"
	exit 1
fi

echo "$merge" > $log_msg
svn log -r "$svnrev" "${root_svnpath}" | sed -e '1,2d;$d;/^[\t ]*$/d' >> $log_msg || failError 1 "Command failed."
svnpath=$(svnpath || failError 1 "Command failed.")

test -d "$(dirname ${destdir})" || failError 1 "Directory does not exist: $destdir"

log 1 "cd $(dirname $destdir)"
cd $(dirname $destdir)
log 1 "Updating directory:"
svn up "$(basename $destdir)" || failError 1 "Command failed."

if [ $? -ne 0 ]; then
	log 3 "svn up failed with error code \"$?\""
	log 1 "Please continue manually:"
	log 1 "svn merge -c $svnrev $svnpath"
	log 1 "svn ci -F \"$log_msg\""
	exit 1
fi

if test -d "$(basename $destdir)"; then
	log 1 "Merging changes:"
	svn merge -c $svnrev "$svnpath" "$(basename $destdir)" || failError 1 "Command failed."
else
	copy=$(queryUser 0 "The directory '$(basename $destdir)' does not exist. Perform svn copy?" "Y")
	if [ "${copy}" = "y" -o "${copy}" = "Y" ]; then
		svn copy -r $svnrev "$svnpath" "$(basename $destdir)"
	else
		log 1 "Please continue manually:"
		log 1 "svn copy -r $svnrev $svnpath $(basename $destdir)"
		log 1 "svn ci -F \"$log_msg\""
		exit 1
	fi
fi

log 1 "Commiting changes with the following log message:"
cat "${log_msg}"
svn ci -F "$log_msg" "$(basename $destdir)"|| failError 1 "Command failed."

rm $log_msg
