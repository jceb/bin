#!/bin/bash
# Script for integrating vim and tmux
# Author: Jan Christoph Ebersbach <jceb@e-jc.de>
# Last Modified: Sat 21. May 2016 21:43:24 +0200 CEST

# Help:
# -i interactive selection of a vim server
# -e create/select a neovim server
# -g create/select a global vim server
# -n create a new vim server despite any existing servers
# -N create a new vim server despite any existing servers but don't create session variables
#
# Related Commands:
# v and vim, open a file in an existing server or creates a new server if there is none
# vv, create a new vim server despite any existing servers
# vvv, interactive server name seletion for a new vim server

# initialization {{{1
set -e
set -u

# retrieve environment variables that haven't been set yet in this shell but are
# availabe withen tmux
set +u
eval "$([[ -n "${TMUX}" ]] && tmux show-environment -g VMUX_SESSION 2>/dev/null || true)"
eval "$([[ -n "${TMUX}" ]] && tmux show-environment 2>/dev/null| grep VMUX_SESSION_ || true)"
set -u

NVIM_SESSION_DIR="${NVIM_SESSION_DIR:=$HOME/.cache/nvim_sessions}"

interactive=
neovim=
global=
newsession=
newsession_no_vars=
while getopts "eignNh" option; do
	case $option in
		i) interactive="1"
			;;
		e) neovim="1"
			;;
		g) global="1"
			;;
		n) newsession="1"
			;;
		N) newsession_no_vars="1"
			;;
		h) echo "$(basename "$0") (-i|-n|-N|-h)"
			echo -e "\t-i interactive selection of a vim server"
			echo -e "\t-e create/select a neovim server"
			echo -e "\t-g create/select a global vim server"
			echo -e "\t-n create a new vim server despite any existing servers"
			echo -e "\t-N create a new vim server despite any existing servers but don't create session variables"
			exit
			;;
		*) echo "Unknown argument ${option}" 1>&2
			exit 1
			;;
	esac
done

remove_session_if_not_existent () {  # {{{1
	set +u
	if [[ -z "${TMUX}" ]]; then
		set -u
		return 0
	fi
	set -u

	local servers session sessionvar found global
	session="$1"
	sessionvar="$2"
	global="$3"
	if [[ -n "${session}" ]]; then
		found=
		if [[ -n "${neovim}" ]]; then
			if [[ -e "${NVIM_SESSION_DIR}/${session}" ]]; then
				found=1
			fi
		else
			servers=( $(/usr/bin/vim --serverlist) )
			set +u
			if [[ -n "${servers}" ]]; then
				set -u
				for s in "${servers[@]}"; do
					if [[ "$(echo "${session}"|tr '[:lower:]' '[:upper:]')" = "${s}" ]]; then
						found=1
						break
					fi
				done
			fi
			set -u
		fi
		if [[ -z "${found}" ]]; then
			if [[ -n "${global}" ]]; then
				tmux set-environment -g -u "${sessionvar}"
			fi
			tmux set-environment -u "${sessionvar}"
			return 0
		fi
	fi
	return 1
}

create_session_variables () {  # {{{1
	set +u
	if [[ -z "${TMUX}" ]]; then
		set -u
		return 0
	fi
	set -u

	local global tsession server
	global="${1}"
	tsession="${2}"
	server="${3}"
	# global vsession
	set +u
	if [[ -n "${global}" ]] && [[ -z "${VMUX_SESSION}" ]]; then
		set -u
		export VMUX_SESSION="${server}"
		tmux set-environment -g VMUX_SESSION "${server}"
	fi
	tmux set-environment "VMUX_SESSION_${tsession}" "${server}"
	set -u
}


if [[ -n "${interactive}" ]]; then  # interactive session {{{1
	if [[ -n "${neovim}" ]]; then
		echo "Interactive selection not supported with neovim!" 1>&2
		exit 1
	else
		server="$(/usr/bin/vim --serverlist | dmenu)"
	fi
else  # non-interactive session {{{1
	# retrieve existing session variables
	set +u
	tsession=$(([[ -n "${TMUX}" ]] && tmux display-message -p '#S') || echo "0")
	local_vmux_session="$(eval "echo \"\${VMUX_SESSION_${tsession}}\"")"
	set -u

	# create session variable
	server="v_$(echo "$(basename $(dirname "$PWD"))_$(basename "$PWD")" | sed -e 's#[^a-zA-Z0-9_-]##g')"
	server="${server}_${tsession}"

	# disable local session
	if remove_session_if_not_existent "${local_vmux_session}" "VMUX_SESSION_${tsession}" '' && eval "unset 'VMUX_SESSION_${tsession}'"; then
		local_vmux_session=
	fi
	# disable global vsession
	set +u
	if remove_session_if_not_existent "${VMUX_SESSION}" 'VMUX_SESSION' '1'; then
		VMUX_SESSION=
	fi
	set -u

	# final creation of variables
	if [[ -n "${newsession_no_vars}" ]]; then
		# don't create session variables
		: pass
	elif [[ -n "${newsession}" ]]; then
		create_session_variables "${global}" "${tsession}" "${server}"
	elif [[ -n "${local_vmux_session}" ]]; then
		server="${local_vmux_session}"
	elif [[ -n "${global}" ]] && [[ -n "${VMUX_SESSION}" ]]; then
		server="${VMUX_SESSION}"
	else
		create_session_variables "${global}" "${tsession}" "${server}"
	fi
fi

# return server session {{{1
echo "${server}"

# vi: ft=sh:tw=80:sw=4:ts=4:sts=4:noet:fdm=marker
