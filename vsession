#!/bin/sh
# Script for integrating vim and tmux
# Author: Jan Christoph Ebersbach <jceb@e-jc.de>
# Last Modified: Thu 09. Jan 2014 17:23:11 +0100 CET

# Help:
# -i interactive selection of a vim server
# -n create a new vim server despite any existing servers
# -N create a new vim server despite any existing servers but don't create session variables
#
# Related Commands:
# v and vim, open a file in an existing server or creates a new server if there is none
# vv, create a new vim server despite any existing servers
# vvv, interactive server name seletion for a new vim server

set -e

# retrieve environment variables that haven't been set yet in this shell but are
# availabe withen tmux
eval "$(tmux show-environment -g VMUX_SESSION 2>/dev/null || true)"
eval "$(tmux show-environment 2>/dev/null| grep VMUX_SESSION_ || true)"

interactive=
global=
newsession=
newsession_no_vars=
while getopts "ignNh" option; do
	case $option in
		i) interactive="1"
			;;
		g) global="1"
			;;
		n) newsession="1"
			;;
		N) newsession_no_vars="1"
			;;
		h) echo "$(basename "$0") (-i|-n|-N|-h)"
			echo "\t-i interactive selection of a vim server"
			echo "\t-g create/select a global vim server"
			echo "\t-n create a new vim server despite any existing servers"
			echo "\t-N create a new vim server despite any existing servers but don't create session variables"
			exit
			;;
		*) echo "Unknown argument ${option}" 1>&2
			exit 1
			;;
	esac
done

remove_session_if_not_existent () {
	local servers session sessionvar found global
	session="$1"
	sessionvar="$2"
	global="$3"
	if [ -n "${session}" ]; then
		servers=( $(/usr/bin/vim --serverlist) )
		found=
		for s in "${servers[@]}"; do
			if [ "$(echo "${session}"|tr '[:lower:]' '[:upper:]')" = "${s}" ]; then
				found=1
				break
			fi
		done
		if [ -z "${found}" ]; then
			if [ -n "${global}" ]; then
				tmux set-environment -g -u "${sessionvar}"
			fi
			tmux set-environment -u "${sessionvar}"
			return 0
		fi
	fi
	return 1
}

create_session_variables () {
	local global tsession server
	global="${1}"
	tsession="${2}"
	server="${3}"
	# global vsession
	if [ -n "${global}" ] && [ -z "${VMUX_SESSION}" ]; then
		export VMUX_SESSION="${server}"
		tmux set-environment -g VMUX_SESSION "${server}"
	fi
	tmux set-environment "VMUX_SESSION_${tsession}" "${server}"
}

if [ -n "${interactive}" ]; then
	server="$(/usr/bin/vim --serverlist | dmenu)"
else
	server="v_$(echo "$(basename $(dirname "$PWD"))_$(basename "$PWD")" | sed -e 's#[^a-zA-Z0-9_-]##g')"
	if [ -n "${TMUX}" ]; then
		tsession=$(tmux display-message -p '#S')
		server="${server}_${tsession}"
		local_vmux_session="$(eval "echo \"\${VMUX_SESSION_${tsession}}\"")"

		remove_session_if_not_existent "${local_vmux_session}" "VMUX_SESSION_${tsession}" '' && eval "unset 'VMUX_SESSION_${tsession}'" || true
		# disable global vsession
		remove_session_if_not_existent "${VMUX_SESSION}" 'VMUX_SESSION' '1' && unset 'VMUX_SESSION' || true

		if [ -n "${newsession_no_vars}" ]; then
			# don't create session variables
			: pass
		elif [ -n "${newsession}" ]; then
			create_session_variables "${global}" "${tsession}" "${server}"
		elif [ -n "${local_vmux_session}" ]; then
			server="${local_vmux_session}"
		elif [ -n "${VMUX_SESSION}" ]; then
			server="${VMUX_SESSION}"
		else
			create_session_variables "${global}" "${tsession}" "${server}"
		fi
	fi
fi
echo "${server}"
